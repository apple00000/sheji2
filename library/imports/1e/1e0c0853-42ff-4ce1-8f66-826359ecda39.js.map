{"version":3,"sources":["assets/framework/extend/SpacePartition.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n@ccclass\r\nexport default class SpacePartition  {\r\n\r\n    static randomSpace(partitions:Array<cc.Rect>, width:number, height:number):cc.Rect{\r\n        let arr = partitions.filter(value => value.width > width && value.height > height);\r\n        if (arr.length === 0)return null;\r\n        let index = Math.floor(Math.random() * arr.length)%arr.length;\r\n        let partition = arr[index];\r\n        let x = partition.xMin + Math.random()*(partition.width - width);\r\n        let y = partition.yMin + Math.random()*(partition.height - height);\r\n\r\n        let result = cc.rect(x, y, width, height);\r\n\r\n        /** 跟它相交的要重新划分 */\r\n        this.partitionRect(partitions, result);\r\n\r\n        return result;\r\n    }\r\n\r\n    static randomSpaces(partitions:Array<cc.Rect>, width:number, height:number, count:number):Array<cc.Rect>{\r\n        let result = [];\r\n        for (let i = 0; i < count; i++){\r\n            let rect = this.randomSpace(partitions, width, height);\r\n            if (rect){\r\n                result.push(rect);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static partitionRect(out:Array<cc.Rect>, rect:cc.Rect, minWidth:number = 0, minHeight:number = 0){\r\n        let list = out.splice(0);\r\n        list.forEach(value => {\r\n            let intersection = new cc.Rect();\r\n            value.intersection(intersection, rect);\r\n            if (intersection.width > 0 && intersection.height > 0){\r\n                SpacePartition.partitionRects(out, value, [rect], minWidth, minHeight);\r\n            }else {\r\n                out.push(value);\r\n            }\r\n        });\r\n    }\r\n\r\n    /** 根据相交拆分矩形 */\r\n    private static partitionRects(out:Array<cc.Rect>, rect:cc.Rect, intersects:Array<cc.Rect>, minWidth:number, minHeight:number){\r\n        if (rect.width < minWidth || rect.height < minHeight){\r\n            return;\r\n        }\r\n        if (intersects.length == 0){\r\n            //干净的空间\r\n            out.push(rect);\r\n            return;\r\n        }\r\n        let cutRect = intersects.pop();\r\n        //左\r\n        if (rect.xMin < cutRect.xMin){\r\n            let leftRect = cc.rect(rect.xMin, rect.yMin, cutRect.xMin - rect.xMin, rect.height);\r\n            this.partitionRects(out, leftRect, intersects.filter(value => {\r\n                let intersection = new cc.Rect();\r\n                value.intersection(intersection, leftRect);\r\n                return intersection.width > 0 && intersection.height > 0;\r\n            }), minWidth, minHeight)\r\n        }\r\n        //右\r\n        if (rect.xMax > cutRect.xMax){\r\n            let rightRect = cc.rect(cutRect.xMax, rect.yMin, rect.xMax - cutRect.xMax, rect.height);\r\n            this.partitionRects(out, rightRect, intersects.filter(value => {\r\n                let intersection = new cc.Rect();\r\n                value.intersection(intersection, rightRect);\r\n                return intersection.width > 0 && intersection.height > 0;\r\n            }), minWidth, minHeight)\r\n        }\r\n\r\n        //上\r\n        if (rect.yMax > cutRect.yMax){\r\n            let upRect = cc.rect(rect.xMin, cutRect.yMax, rect.width, rect.yMax - cutRect.yMax);\r\n            this.partitionRects(out, upRect, intersects.filter(value => {\r\n                let intersection = new cc.Rect();\r\n                value.intersection(intersection, upRect);\r\n                return intersection.width > 0 && intersection.height > 0;\r\n            }), minWidth, minHeight)\r\n        }\r\n\r\n        //下\r\n        if (rect.yMin < cutRect.yMin){\r\n            let downRect = cc.rect(rect.xMin, rect.yMin, rect.width, cutRect.yMin - rect.yMin);\r\n            this.partitionRects(out, downRect, intersects.filter(value => {\r\n                let intersection = new cc.Rect();\r\n                value.intersection(intersection, downRect);\r\n                return intersection.width > 0 && intersection.height > 0;\r\n            }), minWidth, minHeight)\r\n        }\r\n    }\r\n}\r\n"]}