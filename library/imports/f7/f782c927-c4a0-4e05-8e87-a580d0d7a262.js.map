{"version":3,"sources":["assets/script/app/network/Network.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\n\r\nimport {World} from \"../info/World\";\r\nimport {AppConfig} from \"../config/AppConfig\";\r\nimport HttpProtocol from \"../../../framework/http/HttpProtocol\";\r\nimport {HttpClient} from \"../../../framework/http/HttpClient\";\r\nimport {HttpOption} from \"../../../framework/http/HttpOption\";\r\nimport {LocalStorage} from \"../../../framework/persistence/LocalStorage\";\r\nimport Facade from \"../../../framework/facade/Facade\";\r\nimport {NetworkConfig} from \"../config/NetworkConfig\";\r\n\r\nexport default class Network {\r\n\r\n    static async post(protocol:HttpProtocol, httpOption?:HttpOption):Promise<any>{\r\n        // SELF\r\n        return\r\n\r\n        return new Promise(async(resolve, reject) => {\r\n            try {\r\n                let data = await HttpClient.post(protocol);\r\n                resolve(data);\r\n            }catch (e) {\r\n                console.log(e, \"网络出错了…………\");\r\n                if (e.status == 0){\r\n                    Facade.executeCommand('ShowTipsCommand', `${e.message}:请检查网络连接`);\r\n                }else if (e.status == 1){\r\n                    Facade.executeCommand('ShowTipsCommand', `${e.message}:uri=${e.protocol.uri}`);\r\n                } else if (e.status == 200) {\r\n                    if (e.protocol.getResponseStatus() == -2){\r\n                        /** not login*/\r\n                        await Network.login();\r\n                        let data = await Network.post(e.protocol, httpOption);\r\n                        resolve(data);\r\n                        return;\r\n                    }else {\r\n                        Facade.executeCommand('ShowTipsCommand', `${e.message}:uri=${e.protocol.uri} status=${e.protocol.getResponseStatus()}`);\r\n                    }\r\n                }else {\r\n                    Facade.executeCommand('ShowTipsCommand', `${e.message}:uri=${e.protocol.uri} status=${e.status}`);\r\n                }\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    static async login():Promise{\r\n        return new Promise(async resolve => {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    static async uploadInfo():Promise{\r\n        return new Promise(async (resolve, reject) => {\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    static async initData(){\r\n        if (NetworkConfig.connectServer){\r\n            await Network.initGameData();\r\n        }else {\r\n            World.Storage.init();\r\n        }\r\n    }\r\n\r\n    static async uploadLv(lv:number):Promise<any>{\r\n        return new Promise(async (resolve, reject) => {\r\n            let protocol = new HttpProtocol();\r\n            protocol.uri = \"/game/addRecord\";\r\n            protocol.request = {gameId:AppConfig.GameID, key:AppConfig.rankKey, score:lv};\r\n            await Network.post(protocol);\r\n            this.pushStorage();\r\n            resolve();\r\n        });\r\n    }\r\n\r\n\r\n    static async buyItem(itemId:number, num:number = 1):Promise<any>{\r\n        return new Promise(async(resolve, reject) => {\r\n            let protocol = new HttpProtocol();\r\n            protocol.uri = \"/game/mall/buy\";\r\n            protocol.request = {id:itemId, num:num};\r\n            await Network.post(protocol);\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    static async syncBought():Promise<Array<any>>{\r\n        return new Promise<Array<any>>(async(resolve, reject) => {\r\n            let protocol = new HttpProtocol();\r\n            protocol.uri = \"/game/user/items\";\r\n            let list = <Array<any>>await Network.post(protocol);\r\n            resolve(list);\r\n        });\r\n    }\r\n\r\n    static async totalRankList():Promise<Array<any>>{\r\n        return new Promise<Array<any>>(async (resolve, reject) => {\r\n            let protocol = new HttpProtocol();\r\n            protocol.uri = \"/game/getTotalRank\";\r\n            protocol.request = {gameId: AppConfig.GameID, key:AppConfig.rankKey};\r\n            try {\r\n                let {list} = await Network.post(protocol);\r\n                resolve(list);\r\n            }catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    static async addDiamond(add:number):Promise<number>{\r\n        return new Promise<number>(async (resolve, reject) => {\r\n            let protocol = new HttpProtocol();\r\n            protocol.uri = \"/game/user/addDiamond\";\r\n            protocol.request = {num:add};\r\n            let {diamond} = await Network.post(protocol);\r\n            resolve(diamond);\r\n        });\r\n    }\r\n\r\n    static async expendDiamond(expend:number):Promise<number>{\r\n        return new Promise<number>(async (resolve, reject) => {\r\n            let protocol = new HttpProtocol();\r\n            protocol.uri = \"/game/user/expendDiamond\";\r\n            protocol.request = {num:expend};\r\n            let {diamond} = await Network.post(protocol);\r\n            resolve(diamond);\r\n        });\r\n    }\r\n\r\n    static async onShare(shareKey: string, playerId: number): Promise {\r\n        return new Promise(async (resolve, reject) => {\r\n            if (World.My.playerId != 0){\r\n                let protocol = new HttpProtocol();\r\n                protocol.uri = \"/game/onShare\";\r\n                protocol.request = {shareKey: shareKey, fromPlayerId: playerId};\r\n                await Network.post(protocol);\r\n            }\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    static async getShareList(shareKey: string): Promise<Array> {\r\n        return new Promise<Array>(async (resolve, reject) => {\r\n            let protocol = new HttpProtocol();\r\n            protocol.uri = \"/game/getShareList\";\r\n            protocol.request = {shareKey: shareKey};\r\n            let list = await Network.post(protocol);\r\n            resolve(list);\r\n        });\r\n    }\r\n\r\n    static async takeShareReward(shareKey: string, playerId: number): Promise {\r\n        return new Promise(async (resolve, reject) => {\r\n            let protocol = new HttpProtocol();\r\n            protocol.uri = \"/game/receiveSharedRecord\";\r\n            protocol.request = {shareKey: shareKey, receivePlayerId: playerId};\r\n            await Network.post(protocol);\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    private static async setStorage(key:string, value:string):Promise<boolean>{\r\n        return new Promise<boolean>(async (resolve, reject) => {\r\n            let protocol = new HttpProtocol();\r\n            protocol.uri = \"/game/setStorage\";\r\n            protocol.request = {key:key, value:value};\r\n            await Network.post(protocol);\r\n            resolve(true);\r\n        });\r\n    }\r\n\r\n    private static async multiSetStorage(pairs:KVData<string>):Promise<boolean>{\r\n        return new Promise<boolean>(async (resolve, reject) => {\r\n            let protocol = new HttpProtocol();\r\n            protocol.uri = \"/game/multiSetStorage\";\r\n            protocol.request = {pairs:JSON.stringify(pairs)};\r\n            await Network.post(protocol);\r\n            resolve(true);\r\n        });\r\n    }\r\n\r\n    private static async getStorage(key:string):Promise<string>{\r\n        return new Promise<string>(async (resolve, reject) => {\r\n            let protocol = new HttpProtocol();\r\n            protocol.uri = \"/game/getStorage\";\r\n            protocol.request = {key:key};\r\n            let data = await Network.post(protocol);\r\n            resolve(data);\r\n        });\r\n    }\r\n\r\n    private static async multiGetStorage(keys:Array<string>):Promise<KVData<string>>{\r\n        return new Promise<KVData<string>>(async (resolve, reject) => {\r\n            let protocol = new HttpProtocol();\r\n            protocol.uri = \"/game/multiGetStorage\";\r\n            protocol.request = {keys:JSON.stringify(keys)};\r\n            let data = await Network.post(protocol);\r\n            resolve(data);\r\n        });\r\n    }\r\n\r\n\r\n    public static async initGameData():Promise{\r\n        return new Promise(async (resolve, reject) => {\r\n            /** 以服务器为主,除了updateStorageKeys里面没更新的数据以客户端为主 **/\r\n            let keys = World.Storage.allKeys().filter(value => !World.updateStorageKeys.includes(value));\r\n            let values = await Network.multiGetStorage(keys);\r\n            for (let key in values){\r\n                let data = values[key];\r\n                /** 字符串类型则不转成int */\r\n                if (typeof World.Storage[\"_\"+key] == \"number\"){\r\n                    data = parseInt(data);\r\n                }else if (typeof World.Storage[\"_\"+key] == \"boolean\"){\r\n                    data = data.toLowerCase() == \"true\";\r\n                }\r\n                World.Storage[key] = data;\r\n            }\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    /** 推送缓存里的数据到远程服务器 */\r\n    public static async pushStorage(){\r\n        // SELF\r\n        return\r\n\r\n        return new Promise(async (resolve, reject) => {\r\n            console.log(\"========>pushStorage\", World.updateStorageKeys);\r\n            if (World.updateStorageKeys.length == 0){\r\n                resolve();\r\n            } else {\r\n                let kvDatas = {};\r\n                World.pushStorageKeys = World.updateStorageKeys;\r\n                World.updateStorageKeys = [];\r\n                World.pushStorageKeys.forEach(value => {\r\n                    kvDatas[value] = World.Storage[value];\r\n                });\r\n                await Network.multiSetStorage(kvDatas);\r\n                World.pushStorageKeys = [];\r\n                LocalStorage.setString(\"updateKVData\", JSON.stringify(World.updateStorageKeys));\r\n            }\r\n        });\r\n    }\r\n}\r\n"]}