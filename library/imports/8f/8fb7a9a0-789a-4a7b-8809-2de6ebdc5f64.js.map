{"version":3,"sources":["assets/framework/extend/ccnodeAwait.ts"],"names":[],"mappings":";;;;AAAA,oBAAoB;AACpB,iFAAiF;AACjF,yFAAyF;AACzF,mBAAmB;AACnB,2FAA2F;AAC3F,mGAAmG;AACnG,8BAA8B;AAC9B,2FAA2F;AAC3F,mGAAmG;AAEnG,SAAe,SAAS,CAAE,mBAA8D,EAAE,GAAW;mCAAE,OAAO;;;YACtG,IAAI,GAAY,IAAI,CAAC;YACzB,sBAAO,IAAI,OAAO,CAAC,UAAA,OAAO;oBACtB,IAAI,GAAG,GAAG,EAAE,CAAC,QAAQ,CAAC,mBAAmB,EAAE,EAAE,CAAC,QAAQ,CAAC;wBACnD,OAAO,EAAE,CAAC;oBACd,CAAC,CAAC,CAAC,CAAC;oBACJ,IAAI,GAAG,EAAE;wBACL,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACnB;oBACD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;gBACxB,CAAC,CAAC,EAAC;;;CACN;AAGD,SAAe,IAAI,CAAC,IAAY,EAAE,UAAoB;mCAAE,OAAO;;;YACvD,IAAI,GAAY,IAAI,CAAC;YACzB,sBAAO,IAAI,OAAO,CAAC,UAAA,OAAO;oBACtB,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,KAAK;wBAC3B,OAAO,CAAC,KAAK,CAAC,CAAC;oBACnB,CAAC,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;gBACzB,CAAC,CAAC,EAAC;;;CACN;AAED,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,GAAG,SAAS,CAAC;AAC7C,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nasync function runAction (actionOrActionArray: cc.FiniteTimeAction|cc.FiniteTimeAction[], tag?:Number):Promise {\r\n    let self = <cc.Node>this;\r\n    return new Promise(resolve => {\r\n        let seq = cc.sequence(actionOrActionArray, cc.callFunc(function () {\r\n            resolve();\r\n        }));\r\n        if (tag) {\r\n            seq.setTag(tag);\r\n        }\r\n        self.runAction(seq);\r\n    });\r\n}\r\n\r\n\r\nasync function once(type: string, useCapture?: boolean):Promise{\r\n    let self = <cc.Node>this;\r\n    return new Promise(resolve => {\r\n        self.once(type, function (event) {\r\n            resolve(event);\r\n        }, null, useCapture);\r\n    });\r\n}\r\n\r\ncc.Node.prototype.runActionAwait = runAction;\r\ncc.Node.prototype.onceAwait = once;"]}