{"version":3,"sources":["assets/script/quad-tree/LooseQuadTree.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\r\nimport LooseQuadTreeCell from \"./LooseQuadTreeCell\";\r\nimport AABBRegion from \"./AABBRegion\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\n\r\n/** 松散四叉树的主要思想：\r\n *  可以考虑到在相交测试中，扩大包围盒总是保守的（这里的保守是指近似化不会做成错误结果）。如果把四叉／八叉树的正方／立方空间当作包围盒，那么扩大这些包围盒以容纳刚好在边界上相交的物体也是保守的\r\n *  1.将cell的区域放大一倍，保证分层后，每个物体必定被某个cell包含\r\n *  2.松散后，碰撞判断也是根节点往往下，判断testRect与cell的相交，如果相交则判断与其子节点相交的判断，否则就过滤掉其cell。\r\n *  3.放大测试区域不会有错误的结果，同时也解决了在特殊位置上的物体被放到父节点的问题。\r\n * **/\r\n/** 以节点中心为正中心，以节点最大宽高为边长 */\r\n\r\n@ccclass\r\nexport default class LooseQuadTree extends cc.Component {\r\n\r\n    @property({tooltip: \"最小物体边长\"})\r\n    minSideLength = 10;\r\n\r\n    /** 按层划分cell，放到不同的网格中 */\r\n    private _grids: Array<Array<LooseQuadTreeCell>> = [];\r\n\r\n    /** 计算总层数，构造每一次的网格Grid，提前构造网络，虽然内存消耗大，但不用运行时动态创建和销毁cell，提高运行效率。 */\r\n    private init() {\r\n        /** 构造世界矩形 */\r\n        let maxSide = Math.max(this.node.width, this.node.height);\r\n        /** 计算层数 */\r\n        let maxLevel = Math.ceil(Math.log2(maxSide / this.minSideLength));\r\n        /** 构建所有网格 */\r\n        let minX = -maxSide / 2;\r\n        let maxY = maxSide/2;\r\n        /** 有maxLevel层 */\r\n        let sideCount = Math.pow(2, maxLevel);\r\n        for (let i = maxLevel-1; i >= 0; i--) {\r\n            this._grids[i] = [];\r\n            sideCount = sideCount/2;\r\n            let cellLength = maxSide / sideCount;\r\n            /** 构建每一层的网格 */\r\n            for (let r = 0; r < sideCount; r++) {\r\n                for (let c = 0; c < sideCount; c++) {\r\n                    let rect = cc.rect(minX + cellLength * c, maxY - (r+1) * cellLength, cellLength, cellLength);\r\n                    let quads = [];\r\n                    /** 构建四元子树 */\r\n                    if (i < maxLevel-1){\r\n                        /** 取两行两列 */\r\n                        let nextSideCount = sideCount*2;\r\n                        for (let j=0; j<2; j++){\r\n                            for (let k=0; k<2; k++){\r\n                                quads.push(this._grids[i+1][(r*2+j)*nextSideCount + c*2+k]);\r\n                            }\r\n                        }\r\n                    }\r\n                    let index = r * sideCount + c;\r\n                    this._grids[i][index] = new LooseQuadTreeCell(i, index, rect, quads);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateCell(cell:LooseQuadTreeCell){\r\n        if (cell.objectCount > 0){\r\n            cell.objects.forEach(value => this.updateRegion(value));\r\n            cell.children.forEach(value => {\r\n                if (value.objectCount > 0){\r\n                    this.updateCell(value);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /** 更新所有元素 */\r\n    updateAll(){\r\n        this.updateCell(this._grids[0][0]);\r\n    }\r\n\r\n    /** 指定更新某一个元素 */\r\n    updateRegion(region:AABBRegion):boolean{\r\n        if (region.level < 0 || region.index < 0){\r\n            console.error(\"remove fail==>level=\"+region.level+\" index=\"+region.index);\r\n            return false;\r\n        }\r\n        let rect = region.aabb();\r\n        let root = this._grids[0][0];\r\n        let level = region.level;\r\n        //重新计算index\r\n        let cellLength = this._grids[level][0].bounds.width;\r\n        let sideCount = Math.pow(2, level);\r\n        let col = Math.floor((rect.center.x - root.bounds.xMin) / cellLength);\r\n        let row = Math.floor((root.bounds.yMax - rect.center.y) / cellLength);\r\n        let index = row * sideCount + col;\r\n        // console.log(index, region.index, index === region.index);\r\n        if (index != region.index){\r\n            this._grids[region.level][region.index].removeObject(region);\r\n            let cell = this._grids[level][index];\r\n            cell.addObject(region);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    insert(region:AABBRegion):boolean{\r\n        if (region.index >= 0 || region.level >= 0){\r\n            console.error(\"已经分配空间level=\"+region.level+\" index=\"+region.index);\r\n            return false;\r\n        }\r\n        let rect = region.aabb();\r\n        let maxSide = Math.max(rect.width, rect.height);\r\n        let root = this._grids[0][0];\r\n        let rootSide = root.bounds.width;\r\n        if (maxSide > rootSide){\r\n            console.error(\"region rect too big, can not insert it\");\r\n            return null;\r\n        }\r\n        let level = Math.floor(Math.log2(rootSide/maxSide));\r\n        if (level > this._grids.length - 1){\r\n            level = this._grids.length - 1;\r\n            console.warn('Maybe this item is too small, but we can add it to max level.', rootSide, maxSide, level, this._grids.length, region.node.name);\r\n        }\r\n\r\n        let cellLength = this._grids[level][0].bounds.width;\r\n        let sideCount = Math.pow(2, level);\r\n        let col = Math.floor((rect.center.x - root.bounds.xMin) / cellLength);\r\n        let row = Math.floor((root.bounds.yMax - rect.center.y) / cellLength);\r\n        let index = row * sideCount + col;\r\n        // console.log(\"level=\"+level+\" index=\"+index);\r\n        let cell = this._grids[level][index];\r\n        cell.addObject(region);\r\n        // this._graphic.rect(rect.xMin, rect.yMin, rect.width, rect.height);\r\n        // this._graphic.stroke();\r\n        return true;\r\n    }\r\n\r\n    remove(region:AABBRegion):boolean{\r\n        if (region.level < 0 || region.index < 0){\r\n            console.error(\"remove fail==>level=\"+region.level+\" index=\"+region.index);\r\n            return false;\r\n        }\r\n        this._grids[region.level][region.index].removeObject(region);\r\n        return true;\r\n    }\r\n\r\n\r\n    retrieve(rect:cc.Rect, out:Array<AABBRegion>){\r\n        LooseQuadTree.retrieveCount = 0;\r\n        this._grids[0][0].retrieve(rect, out);\r\n        // console.log(\"LooseQuadTree==>\", LooseQuadTree.retrieveCount, out);\r\n    }\r\n\r\n\r\n    _graphic:cc.Graphics = null;\r\n\r\n    static retrieveCount = 0;\r\n    test(rect:cc.Rect){\r\n        let graphic = this._graphic;\r\n        graphic.clear();\r\n\r\n        let arr = [];\r\n        this.retrieve(rect, arr);\r\n\r\n        arr.forEach(value => {\r\n            let aabb = value.aabb();\r\n            graphic.rect(aabb.xMin, aabb.yMin, aabb.width, aabb.height);\r\n        });\r\n        graphic.stroke();\r\n    }\r\n\r\n\r\n\r\n    onLoad(){\r\n        this.init();\r\n        // console.log(this._grids);\r\n        let node = new cc.Node();\r\n        this.node.addChild(node);\r\n        let graphic = node.addComponent(cc.Graphics);\r\n        graphic.strokeColor = cc.Color.RED;\r\n        graphic.lineWidth = 20;\r\n        // this._grids.forEach(value => {\r\n        //     value.forEach(value1 => {\r\n        //         graphic.rect(value1.looseBounds.xMin, value1.looseBounds.yMin, value1.looseBounds.width, value1.looseBounds.height);\r\n        //     });\r\n        // });\r\n        // graphic.stroke();\r\n\r\n        // graphic.fill();\r\n        node.zIndex = 100;\r\n        this._graphic = graphic;\r\n    }\r\n}\r\n"]}