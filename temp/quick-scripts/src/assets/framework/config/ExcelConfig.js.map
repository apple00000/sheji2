{"version":3,"sources":["assets/framework/config/ExcelConfig.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\n\r\n\r\nfunction data2Json(str:Array){\r\n    let d:Array =  str;\r\n    //转换数据\r\n    //第二排是key 把key提出来\r\n    let keys = d.splice(0,1);\r\n    let temp1 = [];\r\n    for(let i in keys[0]){\r\n        temp1[i] = keys[0][i];\r\n    }\r\n    //合并的数据\r\n    let newData = [];\r\n    for(let i in d){\r\n        let temp2 = d[i];\r\n        newData[i] = {};\r\n        for(let j in temp2){\r\n            let key = temp1[j];\r\n            let val = null;\r\n            val = temp2[j];\r\n            newData[i][key] = val;\r\n        }\r\n    }\r\n    return newData;\r\n}\r\n\r\nlet excelTables = new Map<String, Array>();\r\n\r\nexport class ExcelConfig{\r\n    static async loadAllExcel(excelDir:string, progressCallback?: (completedCount: number, totalCount: number, item: any) => void){\r\n        let [objects, urls] = await cc.loader.loadResDirAwait(excelDir, progressCallback);\r\n        for (let i=0; i<objects.length; i++){\r\n            let json = objects[i];\r\n            if (typeof objects[i].json != \"undefined\"){\r\n                json = objects[i].json;\r\n            }\r\n            excelTables.set(urls[i], data2Json(json));\r\n        }\r\n    }\r\n\r\n    static async loadExcel(filePath:String){\r\n        let object = await cc.loader.loadResAwait(filePath);\r\n        let json = object;\r\n        if (typeof object.json != \"undefined\"){\r\n            json = object.json;\r\n        }\r\n        let dataArr =data2Json(json);\r\n        excelTables.set(filePath, dataArr);\r\n    }\r\n\r\n    static getExcelTable(filePath:string) {\r\n        return excelTables.get(filePath);\r\n    }\r\n\r\n    static getExcelLine(filePath:String, key:String, findValue:any):Object{\r\n        let array = this.getExcelTable(filePath);\r\n        for (let index in array){\r\n            if (array[index][key] == findValue){\r\n                return array[index];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"]}