{"version":3,"sources":["assets/framework/converter/JsonConverter.ts"],"names":[],"mappings":";;;;AAAA,oBAAoB;AACpB,iFAAiF;AACjF,yFAAyF;AACzF,mBAAmB;AACnB,2FAA2F;AAC3F,mGAAmG;AACnG,8BAA8B;AAC9B,2FAA2F;AAC3F,mGAAmG;;;AAInG;IAAA;IA2BA,CAAC;IAzBG,8BAAM,GAAN;QACI,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,KAAI,IAAI,IAAI,IAAI,IAAI,EAAE;YAClB,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,UAAU,EAAC;gBAChC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;aAC3B;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,8BAAM,GAAN,UAAO,IAAQ;QACX,IAAI,OAAO,IAAI,IAAI,QAAQ,EAAC;YACxB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAC3B;QAED,KAAI,IAAI,IAAI,IAAI,IAAI,EAAE;YAClB,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,UAAU,EAAC;gBAChC,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,WAAW,EAAE;oBAClC,MAAS,IAAI,CAAC,WAAW,CAAC,IAAI,uCAAkC,IAAM,CAAC;iBAC1E;gBACD,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;aAC3B;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IACL,oBAAC;AAAD,CA3BA,AA2BC,IAAA;AA3BY,sCAAa","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nimport {IConverter} from \"./IConverter\";\r\n\r\nexport class JsonConverter implements IConverter{\r\n\r\n    encode(){\r\n        let json = {};\r\n        for(let attr in this) {\r\n            if (typeof this[attr] != \"function\"){\r\n                json[attr] = this[attr];\r\n            }\r\n        }\r\n        return json;\r\n    }\r\n\r\n    decode(data:any){\r\n        if (typeof data == \"string\"){\r\n            data = JSON.parse(data);\r\n        }\r\n\r\n        for(let attr in this) {\r\n            if (typeof this[attr] != \"function\"){\r\n                if (typeof data[attr] == \"undefined\") {\r\n                    throw `${this.constructor.name}.decode data not found attr===>${attr}`;\r\n                }\r\n                this[attr] = data[attr];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n}\r\n"]}